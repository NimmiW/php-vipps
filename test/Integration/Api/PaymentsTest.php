<?php

namespace Vipps\Tests\Integration\Api;

use Vipps\Exceptions\VippsException;
use Vipps\Tests\Integration\IntegrationTestBase;

class PaymentsTest extends IntegrationTestBase
{

    /**
     * @var string
     */
    protected $merchantSerialNumber = 'test_merchant_serial_number';

    /**
     * @var \Vipps\Api\PaymentInterface
     */
    protected $api;

    /**
     * {@inheritdoc}
     */
    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->client->setToken('test_token');
        $this->api = $this->vipps->payment('test_subscription_key', $this->merchantSerialNumber);
    }

    /**
     * @covers \Vipps\Api\Payment::initiatePayment()
     */
    public function testValidInitiatePayment()
    {
        $this->mockResponse(parent::getResponse([
            'orderId' => 'test_order_id',
            'merchantSerialNumber' => $this->merchantSerialNumber,
            'transactionInfo' => [
                'transactionId' => 'test_transaction_id',
                'amount' => '1200',
                'status' => 'test_status',
                'timeStamp' => '2017-07-31T15:07:37.100Z',
                'message' => 'test_message',
            ]
        ]));

        // Do request.
        $response = $this->api->initiatePayment(
            'test_order_id',
            '98765432',
            1200,
            'test_text',
            'https://www.example.com'
        );

        // Assert response.
        $this->assertEquals('test_order_id', $response->getOrderId());
        $this->assertEquals($this->merchantSerialNumber, $response->getMerchantSerialNumber());
        $this->assertEquals('test_transaction_id', $response->getTransactionInfo()->getTransactionId());
        $this->assertEquals(1200, $response->getTransactionInfo()->getAmount());
        $this->assertEquals('test_status', $response->getTransactionInfo()->getStatus());
        $this->assertEquals(
            '2017-07-31T15:07:37',
            $response->getTransactionInfo()->getTimeStamp()->format('Y-m-d\TH:i:s')
        );
        $this->assertEquals('test_message', $response->getTransactionInfo()->getMessage());
    }

    /**
     * @covers \Vipps\Api\Payment::initiatePayment()
     */
    public function testInvalidInitiatePayment()
    {
        $this->mockResponse(parent::getErrorResponse());
        $this->expectException(VippsException::class);
        $this->api->initiatePayment('test_client_secret', '98765432', 1200, 'test_text', 'http://www.example.com');
    }

    public function testValidCapturePayment()
    {
        // Mock response.
        $this->mockResponse(parent::getResponse([
            'orderId' => 'test_order_id',
            'transactionSummary' => [
                'capturedAmount' => 10,
                'remainingAmountToCapture' => 11,
                'refundedAmount' => 12,
                'remainingAmountToRefund' => 13,
            ],
            'transactionInfo' => [
                'amount' => 1200,
                'message' => 'test_message',
                'timeStamp' => '2017-07-31T15:07:37.100Z',
                'status' => 'test_status',
                'transactionId' => 'test_transaction_id',
            ],
        ]));

        // Do request.
        $response = $this->api->capturePayment(
            'test_order_id',
            'test_text'
        );
        var_dump($response);

        // Assert response.
        $this->assertEquals('test_order_id', $response->getOrderId());
        $this->assertEquals(10, $response->getTransactionSummary()->getCapturedAmount());
        $this->assertEquals(11, $response->getTransactionSummary()->getRemainingAmountToCapture());
        $this->assertEquals(12, $response->getTransactionSummary()->getRefundedAmount());
        $this->assertEquals(13, $response->getTransactionSummary()->getRemainingAmountToRefund());
        $this->assertEquals(1200, $response->getTransactionInfo()->getAmount());
        $this->assertEquals('test_message', $response->getTransactionInfo()->getMessage());
        $this->assertEquals(
            '2017-07-31T15:07:37',
            $response->getTransactionInfo()->getTimeStamp()->format('Y-m-d\TH:i:s')
        );
        $this->assertEquals('test_status', $response->getTransactionInfo()->getStatus());
        $this->assertEquals('test_transaction_id', $response->getTransactionInfo()->getTransactionId());
    }
}
