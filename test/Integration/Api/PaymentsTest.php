<?php

namespace Vipps\Tests\Integration\Api;

use Vipps\Exceptions\VippsException;
use Vipps\Tests\Integration\IntegrationTestBase;

class PaymentsTest extends IntegrationTestBase
{

    /**
     * @var string
     */
    protected $merchantSerialNumber = 'test_merchant_serial_number';

    /**
     * {@inheritdoc}
     */
    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->client->setToken('test_token');
    }

    /**
     * @covers \Vipps\Api\Payment::initiatePayment()
     */
    public function testValidInitiatePayment()
    {
        $api = $this->vipps->payment('test_subscription_key', $this->merchantSerialNumber);
        $this->mockResponse(parent::getResponse([
            'orderId' => 'test_order_id',
            'merchantSerialNumber' => $this->merchantSerialNumber,
            'transactionInfo' => [
                'transactionId' => 'test_transaction_id',
                'amount' => '1200',
                'status' => 'test_status',
                'timeStamp' => '2017-07-31T15:07:37.100Z',
                'message' => 'test_message',
            ]
        ]));

        // Do request.
        $response = $api->initiatePayment('test_order_id', '98765432', 1200, 'test_text', 'https://www.example.com');

        // Assert response.
        $this->assertEquals('test_order_id', $response->getOrderId());
        $this->assertEquals($this->merchantSerialNumber, $response->getMerchantSerialNumber());
        $this->assertEquals('test_transaction_id', $response->getTransactionInfo()->getTransactionId());
        $this->assertEquals(1200, $response->getTransactionInfo()->getAmount());
        $this->assertEquals('test_status', $response->getTransactionInfo()->getStatus());
        $this->assertEquals(
            '2017-07-31T15:07:37',
            $response->getTransactionInfo()->getTimeStamp()->format('Y-m-d\TH:i:s')
        );
        $this->assertEquals('test_message', $response->getTransactionInfo()->getMessage());
    }

    /**
     * @covers \Vipps\Api\Payment::initiatePayment()
     */
    public function testInvalidGetToken()
    {
        $api = $this->vipps->payment('test_subscription_key', $this->merchantSerialNumber);
        $this->mockResponse(parent::getErrorResponse());
        $this->expectException(VippsException::class);
        $api->initiatePayment('test_client_secret', '98765432', 1200, 'test_text', 'http://www.example.com');
    }
}
